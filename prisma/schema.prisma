generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["ems", "er", "public", "request"]
}

/// 
/// er schema
///
model er_Hospital {
  hospital_id       String                 @id @db.VarChar(255)
  hospital_name     String                 @db.VarChar(50)
  hospital_address  String                 @db.VarChar(255)
  hospital_type     er_MedicalFacilityType
  hospital_phone    String?                @db.VarChar(20)
  hospital_city     String                 @db.VarChar(50)
  hospital_district String                 @db.VarChar(50)
  latitude          Float?
  longitude         Float?

  ///
  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  emergency_center           er_EmergencyCenter[]
  employees                  er_Employee[]
  hospital_departments       er_HospitalDepartment[]
  hospital_medical_equipment er_HospitalMedicalEquipment[]
  hospital_servere_illness   er_HospitalServereIllness[]
  patient_hospitals          er_PatientHospital[]
  @@map("hospital")
  @@schema("er")
}

model er_Employee {
  employee_id   String          @id @default(uuid())
  employee_name String          @db.VarChar(50)
  hospital_id   String          @db.VarChar(255)
  id_card       String          @db.VarChar(20)
  password      String          @db.VarChar(255)
  role          er_EmployeeRole

  department_id Int?
  /// default 
  created_at     DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status         Status   @default(ACTIVE)

  /// relation
  hospital                       er_Hospital                       @relation(fields: [hospital_id], references: [hospital_id])
  department                     er_Department?                    @relation(fields: [department_id], references: [department_id])
  employee_doctor_specializations er_EmployeeDoctorSpecialization[]
  employee_nurse_specializations  er_EmployeeNurseSpecialization[]
  nurse_patient                         er_Patient[] @relation("NursePatient")
  doctor_patient                        er_Patient[] @relation("DoctorPatient")
  patient_logs                          er_PatientLog[]
  @@unique([id_card, hospital_id])
  @@map("employee")
  @@schema("er")
}

model er_EmployeeDoctorSpecialization {
  employee_id              String @db.VarChar(50)
  doctor_specialization_id String @db.VarChar(50)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  employee              er_Employee             @relation(fields: [employee_id], references: [employee_id])
  doctor_specialization er_DoctorSpecialization @relation(fields: [doctor_specialization_id], references: [doctor_specialization_id])

  @@id([employee_id, doctor_specialization_id])
  @@map("employee_doctor_specialization")
  @@schema("er")
}

model er_EmployeeNurseSpecialization {
  employee_id             String @db.VarChar(50)
  nurse_specialization_id String @db.VarChar(50)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  employee             er_Employee            @relation(fields: [employee_id], references: [employee_id])
  nurse_specialization er_NurseSpecialization @relation(fields: [nurse_specialization_id], references: [nurse_specialization_id])

  @@id([employee_id, nurse_specialization_id])
  @@map("employee_nurse_specialization")
  @@schema("er")
}

model er_DoctorSpecialization {
  doctor_specialization_id   String @id @default(uuid())
  doctor_specialization_name String @db.VarChar(50)

  department_id Int

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  department                      er_Department                     @relation(fields: [department_id], references: [department_id])
  employee_doctor_specializations er_EmployeeDoctorSpecialization[]

  @@map("doctor_specialization")
  @@schema("er")
}

model er_NurseSpecialization {
  nurse_specialization_id   String @id @default(uuid())
  nurse_specialization_name String @db.VarChar(50)

  /// default
  created_at                     DateTime                         @default(now()) @db.Timestamptz /// @format date-time
  updated_at                     DateTime                         @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status                         Status                           @default(ACTIVE)
  employee_nurse_specializations er_EmployeeNurseSpecialization[]

  @@map("nurse_specialization")
  @@schema("er")
}

model er_Department {
  department_id        Int    @id @default(autoincrement())
  department_name      String @db.VarChar(50)
  parent_department_id Int?

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  parent_department     er_Department?            @relation("DepartmentToSubDepartment", fields: [parent_department_id], references: [department_id])
  sub_departments       er_Department[]           @relation("DepartmentToSubDepartment")
  hospital_departments  er_HospitalDepartment[]
  doctor_specializations er_DoctorSpecialization[]
  employee              er_Employee[]
  @@map("department")
  @@schema("er")
}

model er_HospitalDepartment {
  hospital_id   String @db.VarChar(255)
  department_id Int

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  department er_Department @relation(fields: [department_id], references: [department_id])
  hospital   er_Hospital   @relation(fields: [hospital_id], references: [hospital_id])

  @@id([hospital_id, department_id])
  @@map("hospital_department")
  @@schema("er")
}

model er_EmergencyCenter {
  emergency_center_id              String                    @id @db.VarChar(50)
  hospital_id                      String                    @db.VarChar(255)
  emergency_center_type_code       String                    @db.VarChar(50)
  emergency_center_type            er_MedicalInstitutionType
  emergency_center_name            String                    @db.VarChar(50)
  emergency_center_address         String                    @db.VarChar(255)
  emergency_center_primary_phone   String                    @db.VarChar(20)
  emergency_center_secondary_phone String?                   @db.VarChar(20)
  emergency_center_latitude        Float
  emergency_center_longitude       Float

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  hospital        er_Hospital        @relation(fields: [hospital_id], references: [hospital_id])
  emergency_rooms er_EmergencyRoom[]

  @@map("emergency_center")
  @@schema("er")
}

model er_EmergencyRoom {
  emergency_room_id   String               @id @db.VarChar(50)
  emergency_center_id String               @db.VarChar(50)
  emergency_room_type er_EmergencyRoomType
  emergency_room_name String               @db.VarChar(50)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  emergency_center    er_EmergencyCenter    @relation(fields: [emergency_center_id], references: [emergency_center_id])
  emergency_room_beds er_EmergencyRoomBed[]

  @@map("emergency_room")
  @@schema("er")
}

model er_EmergencyRoomBed {
  emergency_room_id         String                    @db.VarChar(50)
  emergency_room_bed_num    Int
  emergency_room_bed_status er_EmergencyRoomBedStatus @default(AVAILABLE)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  emergency_room          er_EmergencyRoom         @relation(fields: [emergency_room_id], references: [emergency_room_id])
  emergency_room_bed_logs er_EmergencyRoomBedLog[]

  @@id([emergency_room_id, emergency_room_bed_num])
  @@map("emergency_room_bed")
  @@schema("er")
}

model er_EmergencyRoomBedLog {
  emergency_room_id         String                    @db.VarChar(50)
  emergency_room_bed_num    Int
  emergency_room_bed_status er_EmergencyRoomBedStatus
  log_date                  DateTime                  @default(now()) @db.Timestamptz /// @format date-time
  patient_id                String

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  emergency_room_bed er_EmergencyRoomBed @relation(fields: [emergency_room_id, emergency_room_bed_num], references: [emergency_room_id, emergency_room_bed_num])
  patient            er_Patient          @relation(fields: [patient_id], references: [patient_id])

  @@id([emergency_room_id, emergency_room_bed_num, log_date])
  @@map("emergency_room_bed_log")
  @@schema("er")
}

model er_Patient {
  patient_id              String @id @default(uuid())
  patient_name            String @db.VarChar(50)
  patient_birth           String @db.VarChar(50) ///  yyyy-mm-dd
  patient_identity_number String @db.VarChar(100)
  patient_gender          Gender
  patient_phone           String @db.VarChar(50)
  patient_address         String @db.VarChar(50)
  guardian_id            String? @unique() @db.VarChar(50)
  doctor_id               String @db.VarChar(50)
  nurse_id                String @db.VarChar(50)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  emergency_room_bed_logs er_EmergencyRoomBedLog[]
  patient_logs            er_PatientLog[]
  guardian                er_Guardian?
  doctor                  er_Employee @relation("DoctorPatient",fields: [doctor_id], references: [employee_id]) /// 관계테이블 분리 필요해보임  ///DOCTOR_PATIENT   ///현재는 1인 1의사만 관리
  nurse                   er_Employee @relation("NursePatient",fields: [nurse_id], references: [employee_id])   /// 관계테이블 분리 필요해보임  ///NURSE_PATIENT    ///현재는 1인 1간호사만 관리
  patient_hospitals       er_PatientHospital[]
  patient_salt           er_PatientSalt?
  @@map("patient")
  @@schema("er")
}

model er_PatientSalt {
  patient_id String @id @db.VarChar(50)
  salt       String @db.VarChar(255)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  patient er_Patient @relation(fields: [patient_id], references: [patient_id])

  @@map("patient_salt")
  @@schema("er")
}
model er_PatientHospital{
 patient_id String @db.VarChar(50)
  hospital_id String @db.VarChar(255)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
 
  /// relation
  patient er_Patient @relation(fields: [patient_id], references: [patient_id])
  hospital er_Hospital @relation(fields: [hospital_id], references: [hospital_id])


  @@id([patient_id, hospital_id])
  @@map("patient_hospital")
  @@schema("er")
}
model er_PatientLog {
  patient_log_id String @id @default(uuid())
  patient_id String   @db.VarChar(50)
  log_date   DateTime @default(now()) @db.Timestamptz /// @format date-time
  log_type   er_PatientLogType   /// 진단, 처치, 약물처방, 이송, 퇴원, 사망, 상담
  log_desc   String   @db.Text() 
  employee_id String  @db.VarChar(50)
  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  patient er_Patient @relation(fields: [patient_id], references: [patient_id])
  employee er_Employee @relation(fields: [employee_id], references: [employee_id])
  @@map("patient_log")
  @@schema("er")
}

model er_Guardian {
  guardian_id       String               @id @default(uuid())
  guardian_name     String               @db.VarChar(50)
  guardian_phone    String               @db.VarChar(50)
  guardian_address  String               @db.VarChar(200)
  guardian_relation ems_GuardianRelation /// 환자와의 관계

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  patient er_Patient @relation(fields: [guardian_id], references: [guardian_id])

  @@map("guardian")
  @@schema("er")
}

model er_ServereIllness {
  servere_illness_id   String @id @default(uuid()) @db.VarChar(50)
  servere_illness_name String @db.VarChar(50)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  hospital_servere_illness er_HospitalServereIllness[]

  @@map("servere_illness")
  @@schema("er")
}

model er_HospitalServereIllness {
  hospital_id        String @db.VarChar(255)
  servere_illness_id String @db.VarChar(50)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  hospital        er_Hospital       @relation(fields: [hospital_id], references: [hospital_id])
  servere_illness er_ServereIllness @relation(fields: [servere_illness_id], references: [servere_illness_id])

  @@id([hospital_id, servere_illness_id])
  @@map("hospital_servere_illness")
  @@schema("er")
}

model er_MedicalEquipment {
  medical_equipment_id   Int    @id
  medical_equipment_name String @db.VarChar(50)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  hospital_medical_equipment er_HospitalMedicalEquipment[]

  @@map("medical_equipment")
  @@schema("er")
}

model er_HospitalMedicalEquipment {
  hospital_id             String @db.VarChar(255)
  medical_equipment_id    Int
  medical_equipment_count Int

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  hospital          er_Hospital         @relation(fields: [hospital_id], references: [hospital_id])
  medical_equipment er_MedicalEquipment @relation(fields: [medical_equipment_id], references: [medical_equipment_id])

  @@id([hospital_id, medical_equipment_id])
  @@map("hospital_medical_equipment")
  @@schema("er")
}

model er_Response {
  emergency_center_id String @db.VarChar(50)
  request_id          String @db.VarChar(50)

  response      er_ResponseType
  reject_reason String?         @db.VarChar(255)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  @@id([emergency_center_id, request_id])
  @@map("response")
  @@schema("er")
}

enum er_EmployeeRole {
  ADMIN
  SPECIALIST
  RESIDENT
  NURSE
  EMT
  RECEPTIONIST

  @@schema("er")
}

enum er_EmergencyRoomType {
  GENERAL
  COHORT_ISOLATION
  NEGATIVE_PRESSURE_ISOLATION
  STANDARD_ISOLATION
  PEDIATRIC
  PEDIATRIC_NEGATIVE_PRESSURE_ISOLATION
  PEDIATRIC_STANDARD_ISOLATION

  @@schema("er")
}

enum er_EmergencyRoomBedStatus {
  AVAILABLE
  OCCUPIED
  CLEANING
  MAINTENANCE

  @@schema("er")
}

enum er_MedicalFacilityType {
  HOSPITAL
  HEALTH_CENTER
  HEALTH_MEDICAL_CENTER
  HEALTH_SUB_CENTER
  HEALTH_CLINIC
  ADVANCED_GENERAL
  NURSING_HOSPITAL
  CLINIC
  MENTAL_HOSPITAL
  MATERNITY_CLINIC
  GENERAL_HOSPITAL
  DENTAL_HOSPITAL
  DENTAL_CLINIC
  ORIENTAL_HOSPITAL
  ORIENTAL_CLINIC

  @@schema("er")
}

enum er_MedicalInstitutionType {
  NON_EMERGENCY_MEDICAL_INSTITUTION
  LOCAL_EMERGENCY_MEDICAL_INSTITUTION
  LOCAL_EMERGENCY_MEDICAL_CENTER
  REGIONAL_EMERGENCY_MEDICAL_CENTER

  @@schema("er")
}

enum er_ResponseType {
  ACCEPTED
  REJECTED

  @@schema("er")
}

enum er_PatientLogType {
  DIAGNOSIS /// 진단
  TREATMENT /// 처치
  MEDICATION /// 약물처방
  TRANSFER /// 이송
  DISCHARGE /// 퇴원
  DEATH /// 사망
  CONSULTATION /// 상담
  EMS_LOG /// EMS 로그
  @@schema("er")
}


/// 
/// ems schema
///
model ems_AmbulanceCompany {
  ambulance_company_id             String  @id @default(uuid())
  ambulance_company_name           String  @db.VarChar(50)
  ambulance_company_representative String? @db.VarChar(50)
  ambulance_company_area           String  @db.VarChar(50)
  ambulance_company_address        String? @db.VarChar(255)
  ambulance_company_phone          String  @db.VarChar(20)

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  employees  ems_Employee[]
  ambulances ems_Ambulance[]

  @@map("ambulance_company")
  @@schema("ems")
}

model ems_Ambulance {
  ambulance_id         String            @id
  ambulance_company_id String            @db.VarChar(50)
  ambulance_type       ems_AmbulanceType
  ambulance_number     String            @db.VarChar(50)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  ///relation
  ambulance_company ems_AmbulanceCompany @relation(fields: [ambulance_company_id], references: [ambulance_company_id])
  employees          ems_AmbulanceEmployee[]
  @@map("ambulance")
  @@schema("ems")
}

model ems_Employee {
  employee_id          String           @id @default(uuid())
  ambulance_company_id String           @db.VarChar(50)
  employee_name        String           @db.VarChar(50)
  role                 ems_EmployeeRole
  id_card              String           @db.VarChar(20)
  password             String           @db.VarChar(255)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  ambulance_company ems_AmbulanceCompany @relation(fields: [ambulance_company_id], references: [ambulance_company_id])
  patients          ems_Patient[]
  ambulances         ems_AmbulanceEmployee[]
  @@unique([id_card, ambulance_company_id])
  @@map("employee")
  @@schema("ems")
}

model ems_AmbulanceEmployee{
  ambulance_id String @db.VarChar(50)
  employee_id  String @db.VarChar(50)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time


  /// relation
  ambulance ems_Ambulance @relation(fields: [ambulance_id], references: [ambulance_id])
  employee  ems_Employee  @relation(fields: [employee_id], references: [employee_id])
  
  @@id([ambulance_id, employee_id])
  @@map("ambulance_employee")
  @@schema("ems")
}

model ems_Patient {
  patient_id              String            @id @default(uuid())
  patient_name            String            @default("익명") @db.VarChar(50) /// 익명으로 기본값
  patient_birth           String            @default("0000-00-00") @db.VarChar(50) /// 생년월일 0000-00-00 형식 0000-00-00은 미상
  patient_identity_number String            @db.VarChar(100) // 주민등록번호 뒷자리 7자리 암호화해서 저장
  patient_phone           String            @default("000-0000-0000") @db.VarChar(50) /// 000-0000-0000 형식 000-0000-0000은 미상
  patient_address         String            @default("미상") @db.VarChar(200) /// 환자 주소 미상으로 기본값
  patient_gender          Gender
  patient_latitude        Float /// 위도 - 사고지점  
  patient_longitude       Float /// 경도 - 사고지점
  patient_severity        ems_Severity /// 중증, 경증, 정상, 미상 
  patient_emergency_cause ems_IncidentCause /// 사고원인
  guardian_id             String?           @unique @db.VarChar(50)
  ems_employee_id         String            @db.VarChar(50)
  complete_date           DateTime?         @default("1970-01-01T00:00:00Z") @db.Timestamptz /// @format date-time/// 유닉스 타임스탬프 "1970-01-01T00:00:00Z" = 아직 완료 안함
  patient_status          ems_PatientStatus @default(PENDING) /// 대기중 // 요청전 단계
  /// default 
  created_at              DateTime          @default(now()) @db.Timestamptz /// @format date-time
  updated_at              DateTime          @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status                  Status            @default(ACTIVE)

  /// relation
  guardian     ems_Guardian?
  abcde        ems_ABCDE_Assessment[]
  dcap_btls    ems_DCAP_BTLS_Assessment[]
  vs           ems_VS_Assessment[]
  sample       ems_SAMPLE_Assessment[]
  opqrst       ems_OPQRST_Assessment[]
  employee     ems_Employee               @relation(fields: [ems_employee_id], references: [employee_id])
  patient_salt ems_PatientSalt?
  rapid ems_Rapid_Asscessment[]
  @@map("patient")
  @@schema("ems")
}

model ems_PatientSalt {
  patient_id String @id @db.VarChar(50)
  salt       String @db.VarChar(255)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  patient ems_Patient @relation(fields: [patient_id], references: [patient_id])

  @@map("patient_salt")
  @@schema("ems")
}

model ems_Guardian {
  guardian_id       String               @id @default(uuid())
  guardian_name     String               @db.VarChar(50)
  guardian_phone    String               @db.VarChar(50)
  guardian_address  String               @db.VarChar(200)
  guardian_relation ems_GuardianRelation /// 환자와의 관계

  /// default 
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  patient ems_Patient @relation(fields: [guardian_id], references: [guardian_id])

  @@map("guardian")
  @@schema("ems")
}
model ems_Rapid_Asscessment{
  patient_id String @db.VarChar(50)
  trauma Enum_Bool
  conscious Enum_Bool
  clear Enum_Bool

  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status Status @default(ACTIVE)
  /// relation
  patient ems_Patient @relation(fields: [patient_id], references: [patient_id])


  @@id([patient_id, created_at])
  @@map("rapid_assessment")
  @@schema("ems")
}

model ems_ABCDE_Assessment {
  patient_id                           String               @db.VarChar(50)
  airway_status                        ems_AirwayStatus /// 기도 상태
  breathing_rate                       Int /// 호흡수 //단위 횟수/분
  breathing_quality                    ems_BreathingQuality /// 호흡 품질
  circulation_pulse                    Int //맥박  //단위 횟수/분 
  circulation_systolic_blood_pressure  Int /// 수축기 혈압 //단위 mmHg
  circulation_diastolic_blood_pressure Int /// 이완기 혈압 //단위 mmHg
  disability_avpu                      ems_DisabilityAVPU /// 의식 상태
  exposure_notes                       String               @db.VarChar(255) /// 노출 상태 : 외상, 화상, 발진, 저체온, 기타노출에 대한 상세 내용
  /// default
  created_at                           DateTime             @default(now()) @db.Timestamptz /// @format date-time
  updated_at                           DateTime             @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status                               Status               @default(ACTIVE)

  /// relation
  patient ems_Patient @relation(fields: [patient_id], references: [patient_id])

  @@id([patient_id, created_at])
  @@map("abcde_assessment")
  @@schema("ems")
}

/// DCAP-BTLS :  Deformity, Contusion, Abrasion, Puncture, Burn, Tenderness, Laceration, Swelling
model ems_DCAP_BTLS_Assessment {
  patient_id String @db.VarChar(50)

  affected_area ems_AffectedArea /// 부위
  deformity     String           @default("없음") @db.VarChar(50)
  contusion     String           @default("없음") @db.VarChar(50)
  abrasion      String           @default("없음") @db.VarChar(50)
  puncture      String           @default("없음") @db.VarChar(50)
  burn          String           @default("없음") @db.VarChar(50)
  tenderness    String           @default("없음") @db.VarChar(50)
  laceration    String           @default("없음") @db.VarChar(50)
  swelling      String           @default("없음") @db.VarChar(50)
  /// default
  created_at    DateTime         @default(now()) @db.Timestamptz /// @format date-time
  updated_at    DateTime         @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status        Status           @default(ACTIVE)
  /// relation
  patient       ems_Patient      @relation(fields: [patient_id], references: [patient_id])

  @@id([patient_id, created_at, affected_area])
  @@map("dcap_btls_assessment")
  @@schema("ems")
}

model ems_VS_Assessment {
  patient_id               String      @db.VarChar(50)
  heart_rate               Int /// 심박수 맥박 //단위 횟수/분
  respiratory_rate         Int /// 호흡수  //단위 횟수/분
  systolic_blood_pressure  Int /// 수축기 혈압 //단위 mmHg
  diastolic_blood_pressure Int /// 이완기 혈압 //단위 mmHg
  temperature              Float /// 체온 //단위 ℃
  /// default
  created_at               DateTime    @default(now()) @db.Timestamptz /// @format date-time
  updated_at               DateTime    @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status                   Status      @default(ACTIVE)
  /// relation
  patient                  ems_Patient @relation(fields: [patient_id], references: [patient_id])

  @@id([patient_id, created_at])
  @@map("vs_assessment")
  @@schema("ems")
}

/// 가장 애매하고 어려운 부분
/// 각 요소들을 모두 테이블 분리를 해야 할 것으로 보임
/// 예시 
/// 약물종류을 조사 후 1:N 관계로 테이블 분리
/// 알러지종류 조사 후 1:N 관계로 테이블 분리
/// 과거 병력 조사 후 1:N 관계로 테이블 분리
/// 현재는 MVP개발중이기에 하나의 테이블로 관리
model ems_SAMPLE_Assessment {
  patient_id                String      @db.VarChar(50)
  signs_symptoms            String      @db.VarChar(255) /// 증상 및 증후
  allergies                 String      @db.VarChar(255) /// 알레르기
  medications               String      @db.VarChar(255) /// 복용중인 약물
  past_medical_history      String      @db.VarChar(255) /// 과거 병력 
  /// "1970-01-01T00:00:00Z" 미상 //유닉스 타임스탬프
  last_oral_intake          DateTime    @default("1970-01-01T00:00:00Z") @db.Timestamptz /// @format date-time /// 마지막 경구 섭취 
  events_leading_to_illness String      @db.VarChar(255) /// 발병 전 사건 - 무엇을 하고있었는지.
  /// default 
  created_at                DateTime    @default(now()) @db.Timestamptz /// @format date-time
  updated_at                DateTime    @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status                    Status      @default(ACTIVE)
  /// relation
  patient                   ems_Patient @relation(fields: [patient_id], references: [patient_id])

  @@id([patient_id, created_at])
  @@map("sample_assessment")
  @@schema("ems")
}

model ems_OPQRST_Assessment {
  patient_id  String      @db.VarChar(50)
  onset       String      @db.VarChar(255) /// 발병상황 - 증상이 시작되었을 때 와 무엇을 하고있었고, 통증은 언제부터 시작됬는지
  provocation String      @db.VarChar(255) /// 유발요인 
  quality     String      @db.VarChar(255) /// 특징 -- 쥐어짜듯이, 찢어지듯이 ...
  radiation   String      @db.VarChar(255) /// 방사 전이, 아픔이 다른 곳으로 옮겨가거나 다른 관련 증상은 없는지
  severity    Int /// 심각도 1~10
  time        DateTime    @default("1970-01-01T00:00:00Z") @db.Timestamptz /// @format date-time /// 통증 발현시간 //유닉스 타임스탬프 "1970-01-01T00:00:00Z" = 미상
  /// default
  created_at  DateTime    @default(now()) @db.Timestamptz /// @format date-time
  updated_at  DateTime    @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status      Status      @default(ACTIVE)
  /// relation
  patient     ems_Patient @relation(fields: [patient_id], references: [patient_id])

  @@id([patient_id, created_at])
  @@map("opqrst_assessment")
  @@schema("ems")
}

enum ems_EmployeeRole {
  ADMIN
  DRIVER
  EMERGENCY_MEDICAL_TECHNICIAN
  DISPATCHER

  @@schema("ems")
}

enum ems_AmbulanceType {
  GENERAL ///일반
  SPECIAL ///특수
  BOX_TYPE ///박스형(특수)
  NEGATIVE_PRESSURE ///음압(특수)

  @@schema("ems")
}

enum ems_IncidentCause {
  TRAFFIC_ACCIDENT /// 교통사고
  FIRE /// 화재
  CRIMINAL /// 범죄
  DISASTER /// 재난
  DISEASE /// 질병
  OTHER /// 기타

  @@schema("ems")
}

enum ems_Severity {
  SEVERE /// 중증
  MILD /// 경증
  NONE /// 없음, 정상
  UNKNOWN /// 미상, 판단 불가한 경우

  @@schema("ems")
}

enum ems_AirwayStatus {
  OPEN /// 환자의 기도가 개방되어 있음
  PARTIALLY_OBSTRUCTED /// 환자의 기도가 부분적으로 막혀 있음
  OBSTRUCTED /// 환자의 기도가 완전히 막혀 있음
  INTUBATED /// 환자가 기도 삽관을 받았음

  UNKNOWN /// 환자의 기도 상태를 알 수 없음

  @@schema("ems")
}

enum ems_BreathingQuality {
  NORMAL /// 정상적인 호흡
  SHALLOW /// 얕은 호흡
  DEEP /// 깊은 호흡
  LABORED /// 어려운 호흡
  IRREGULAR /// 불규칙한 호흡
  RAPID /// 빠른 호흡
  SLOW /// 느린 호흡
  AGONAL /// 고통스러운 호흡

  @@schema("ems")
}

enum ems_GuardianRelation {
  PARENT /// 부모
  SPOUSE /// 배우자
  CHILD /// 자녀
  SIBLING ///  형제자매
  FRIEND /// 친구
  OTHER /// 기타

  @@schema("ems")
}

enum ems_DisabilityAVPU {
  ALERT /// 의식이 명확함
  VERBAL_STIMULI /// 의식이 혼미함
  PAIN_STIMULI /// 의식이 혼수상태임
  UNRESPONSIVE /// 의식이 없음

  @@schema("ems")
}

enum ems_AffectedArea {
  HEAD // 머리
  NECK // 목
  CHEST // 가슴
  ABDOMEN // 복부
  LEFT_ARM // 왼쪽 팔
  RIGHT_ARM // 오른쪽 팔
  LEFT_LEG // 왼쪽 다리
  RIGHT_LEG // 오른쪽 다리
  BACK // 등
  PELVIS // 골반
  UNKNOWN // 알 수 없음

  @@schema("ems")
}

enum RequestStatus {
  REQUESTED /// 요청됨
  VIEWED /// 확인됨
  ACCEPTED /// 수락됨
  REJECTED /// 거절됨
  CANCELED /// 취소됨
  COMPLETED /// 완료됨

  @@schema("request")
}

enum Gender {
  FEMALE
  MALE

  @@schema("public")
}

enum ems_PatientStatus {
  PENDING /// 대기중 // 요청전 단계 
  REQUESTED /// 요청됨
  ACCEPTED /// 수락됨
  CANCELED /// 취소됨
  COMPLETED /// 완료됨

  @@schema("ems")
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED

  @@schema("public")
}

/// ////
/// request schema
/// ////

model req_EmsToErRequest {
  patient_id          String        @db.VarChar(50)
  emergency_center_id String        @db.VarChar(50)
  request_status      RequestStatus @default(REQUESTED)
  request_date        DateTime      @default(now()) @db.Timestamptz /// @format date-time
  reject_reason       String?       @db.VarChar(255)
  response_date       DateTime      @default("1970-01-01T00:00:00Z") @db.Timestamptz /// @format date-time /// 유닉스 타임스탬프 "1970-01-01T00:00:00Z" = 아직 응답 안함

  emergency_center_name      String @db.VarChar(50)
  emergency_center_latitude  Float
  emergency_center_longitude Float
  distance                   Float  @default(0) /// 응급차와 응급실 사이의 거리

  /// default
  created_at DateTime    @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime    @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status      @default(ACTIVE)
  /// relation
  patient    req_Patient @relation(fields: [patient_id], references: [patient_id])

  @@id([patient_id, emergency_center_id])
  @@map("ems_to_er_request")
  @@schema("request")
}

model req_Patient {
  patient_id       String       @id @db.VarChar(50)
  patient_name     String       @default("익명") @db.VarChar(50) /// 익명으로 기본값
  patient_birth    String       @default("0000-00-00") @db.VarChar(50) /// 생년월일 0000-00-00 형식 0000-00-00은 미상
  patient_gender   Gender
  patient_severity ems_Severity /// 중증, 경증, 정상, 미상

  patient_symptom_summary String @db.VarChar(255)
  patient_latitude        Float /// 위도 - 사고지점
  patient_longitude       Float /// 경도 - 사고지점



  /// 요청한 곳
  ambulance_company_id   String @db.VarChar(50)
  ambulance_company_name String @db.VarChar(50)
  ems_employee_id        String @db.VarChar(50)
  ems_employee_name      String @db.VarChar(50)

  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)

  /// relation
  ems_to_er_request req_EmsToErRequest[]
  request_department req_RequestDepartment[]
  @@map("patient")
  @@schema("request")
}

model req_RequestDepartment {
 patient_id String @db.VarChar(50)
 department_id Int 
  /// default
  created_at DateTime @default(now()) @db.Timestamptz /// @format date-time
  status     Status   @default(ACTIVE)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz /// @format date-time
  
    /// relation
  patient req_Patient @relation(fields: [patient_id], references: [patient_id])
  
  @@id([patient_id, department_id])
  @@map("request_department")
  @@schema("request")
}



enum Enum_Bool { 
 TRUE
 FALSE
 @@schema("public")
}